from aiogram.types import Message,ReplyKeyboardRemove
from aiogram.filters import Command,CommandStart
from aiogram import Router,F
from lexicon.lexicon import LEXICON_RU,LEXICON_WORD
from services.words_game import wordGame
from sqlite3 import Connection
from keyboards.keyboards import what_game_kb, get_word_kb, stop_kb

router = Router()
game = wordGame()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@router.message(Command(commands=["start"]))
async def process_start_command(message: Message, dbConnect: Connection):
    await message.answer(LEXICON_RU['start'], reply_markup=what_game_kb)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/creator"
@router.message(Command(commands=['creator']))
async def process_help_command(message: Message):
    await message.answer(LEXICON_RU['creator'])

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–≥—Ä–∞—Ç—å –≤ –≤–∏—Å–µ–ª–∏—Ü—É
@router.message(F.text == LEXICON_RU['hanged_button'])
async def process_word_need(message: Message):
    await message.answer(LEXICON_RU['hang_need'],reply_markup= ReplyKeyboardRemove())
    await message.answer(LEXICON_WORD['ready_to_play'], reply_markup= get_word_kb)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø—É –æ—Ç–º–µ–Ω—ã
@router.message(F.text == LEXICON_RU['cancel'])
async def process_cancel(message: Message):
    await message.answer(LEXICON_RU['cancel_start'],reply_markup=what_game_kb)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞
@router.message(F.text == LEXICON_WORD['get_word'])
async def process_game_command(message: Message):
    await message.answer(text=LEXICON_WORD['you_word'], reply_markup=ReplyKeyboardRemove())
    if game.status:
        await message.answer(text='–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –û—Ç–≥–∞–¥—ã–≤–∞–π—Ç–µ —Å–ª–æ–≤–æ')
        return
    try:
        msg = await game.getWord()
    except:
        msg = '–£ –º–µ–Ω—è –Ω–µ—Ç —Å–ª–æ–≤ (('
    await message.answer(text=msg,reply_markup=stop_kb)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞ –ø–æ –±—É–∫–≤–∞–º
@router.message(lambda message: len(message.text) == 1 and game.status)
async def process_check_symb(message: Message):
    answer = game.checkSymb(message.text)
    if answer == 'win':
        game.stop()
        await message.answer(text=f'–ü–æ–±–µ–¥–∏–ª {message.from_user.full_name}!üéâüéâ')
        await message.answer(text=LEXICON_RU['again_answ'],reply_markup= get_word_kb)
    elif answer:
        await message.answer(text=answer)
        await message.answer(text=f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {game.getUsedSymbols()}')
    else:
        game.stop()
        await message.answer(text='–°–ª–æ–≤–æ–º –±—ã–ª–æ:')
        await message.answer(text=game.stop())
        await message.answer(text='–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, —Å—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?', reply_markup=get_word_kb)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞ —Ü–µ–ª–∏–∫–æ–º
@router.message(lambda message: message.text == game.word)
async def process_win(message: Message):
    if game.status:
        game.stop()
        await message.answer(text=f'–ü–æ–±–µ–¥–∏–ª {message.from_user.full_name}!üéâüéâ')
        await message.answer(text=LEXICON_RU['again_answ'], reply_markup=get_word_kb)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–≥—Ä—ã
@router.message(F.text == LEXICON_RU['stop_game'])
async def process_stop_game(message: Message):
    game.stop()
    await message.answer(text='–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞‚õî')
    await message.answer(text='–ù–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é!', reply_markup=get_word_kb)
